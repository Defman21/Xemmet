// Generated by CoffeeScript 2.0.0-beta1
(function() {
  var Cc, Ci, injectObserver, injections, log, prefWindowObserver;
  log = require('ko/logging').getLogger('xemmet');
  ({Cc, Ci} = require('chrome'));
  injectObserver = false;
  injections = [];
  prefWindowObserver = {
    observe: function(subject, topic, data) {
      var $, basename, caption, contentWindow, frameWindow, i, index, j, k, len, len1, len2, o, options, pref, prefs, ref, ref1, results, sibling, siblingSelector, strictMode, target, windows, wm, wrapLineMode, wrapStrictMode, x, xemmet, xemmetEnabled;
      results = [];
      for (i = 0, len = injections.length; i < len; i++) {
        o = injections[i];
        log.debug(JSON.stringify(o));
        basename = o.basename;
        siblingSelector = o.siblingSelector;
        caption = o.caption;
        if (data.indexOf(basename) === -1) {
          continue;
        }
        wm = Cc['@mozilla.org/appshell/window-mediator;1'].getService(Ci.nsIWindowMediator);
        windows = wm.getEnumerator('komodo_prefs');
        contentWindow = windows.getNext().QueryInterface(Ci.nsIDOMWindow);
        if (!contentWindow) {
          log.debug('Cannot find pref window, skipping injection');
          continue;
        }
        frameWindow = false;
        ref = contentWindow.frames;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          x = ref[j];
          if (x.location.href.indexOf(basename) !== -1) {
            frameWindow = x;
            break;
          }
        }
        if (!frameWindow) {
          log.debug('Cannot find frame window, skipping injection');
          continue;
        }
        $ = require('ko/dom');
        if ($('#xemmet_main', frameWindow.document).length > 0) {
          log.debug('The pref is already injected in current DOM, skipping');
          continue;
        }
        sibling = $(siblingSelector, frameWindow.document);
        options = $.create('groupbox', {
          id: 'xemmet_main'
        }, $.create('caption', {
          label: caption
        })('vbox align="left"', {
          id: 'xemmet_main_vbox'
        }, $.create('textbox', {
          id: 'xemmet_css_langs',
          flex: 1,
          pref: 'true',
          prefstring: 'xemmet_css_languages',
          prefattribute: 'value',
          placeholder: 'Additional CSS Language Names that Xemmet should run on'
        })('textbox', {
          id: 'xemmet_html_langs"',
          flex: '1',
          pref: 'true',
          prefstring: 'xemmet_html_languages',
          prefattribute: 'value',
          placeholder: 'Additional HTML Language Names that Xemmet should run on'
        })));
        sibling.after(options.toString());
        xemmet = require('xemmet/xemmet');
        strictMode = require('ko/ui/checkbox').create('Xemmet only works for HTML and CSS based languages');
        wrapLineMode = require('ko/ui/checkbox').create('Wrap selection uses current line if there is no selection');
        wrapStrictMode = require('ko/ui/checkbox').create('Wrap selection only works for HTML based languages');
        xemmetEnabled = require('ko/ui/checkbox').create('Enable Xemmet');
        prefs = [['xemmet_enable_line_wrap_selection', true], ['xemmet_wrap_strict_mode', true], ['xemmet_strict_mode', true], ['xemmet_enabled', true]];
        target = $('#xemmet_main_vbox', frameWindow.document);
        ref1 = [wrapLineMode, wrapStrictMode, strictMode, xemmetEnabled];
        for (index = k = 0, len2 = ref1.length; k < len2; index = ++k) {
          pref = ref1[index];
          pref.checked(xemmet.prefs.getBoolean(prefs[index][0], prefs[index][1]));
          pref.$element.attr('id', prefs[index][0]);
          pref.$element.attr('pref', true);
          pref.$element.attr('preftype', 'boolean');
          pref.$element.attr('checked', xemmet.prefs.getBoolean(prefs[index][0], prefs[index][1]));
          target.prepend(pref.$element);
        }
        results.push(log.debug('created the injection'));
      }
      return results;
    }
  };
  return this.injectPref = function(o) {
    var e, observerSvc;
    log.debug('injecting a preference');
    log.debug(JSON.stringify(o));
    try {
      injections.push(o);
    } catch (error) {
      e = error;
      log.debug('something went wrong');
      log.exception(e);
    }
    if (!injectObserver) {
      injectObserver = true;
      observerSvc = Cc['@mozilla.org/observer-service;1'].getService(Ci.nsIObserverService);
      return observerSvc.addObserver(prefWindowObserver, 'pref_page_loaded', false);
    }
  };
}).apply(module.exports);
